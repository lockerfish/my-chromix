[user]
  name = Hendrix Tavarez
  email = hendrix@lockerfish.com

[core]
	editor = vim
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore


# #-----------------------------------------------------------------------------------#
# #                                                Git.                                                     #
# #-----------------------------------------------------------------------------------#
#
# alias ga='git add'
# alias gaa='git add --all'
# alias gapa='git add --patch'
# alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m "--wip--"'

# alias gb='git branch'
# alias gba='git branch -a'
# alias gbd='git branch -d'
# alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
# alias gbnm='git branch --no-merged'
# alias gbr='git branch --remote'
# alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'

# alias gbl='git blame -b -w'
# alias gbs='git bisect'
# alias gbsb='git bisect bad'
# alias gbsg='git bisect good'
# alias gbsr='git bisect reset'
# alias gbss='git bisect start'

# alias gc='git commit -v'
# alias 'gc!'='git commit -v --amend'
# alias gca='git commit -v -a'
# alias 'gca!'='git commit -v -a --amend'
# alias gcam='git commit -a -m'
# alias 'gcan!'='git commit -v -a --no-edit --amend'
# alias 'gcans!'='git commit -v -a -s --no-edit --amend'
# alias gcs='git commit -S'
# alias gcsm='git commit -s -m'
# alias gcmsg='git commit -m'
# alias 'gcn!'='git commit -v --no-edit --amend'

# alias gco='git checkout'
# alias gcb='git checkout -b'
# alias gcd='git checkout develop'
# alias gch='git checkout hotfix'
# alias gcm='git checkout master'
# alias gcr='git checkout release'

# alias gcf='git config --list'

# alias gcl='git clone --recursive'

# alias gclean='git clean -fd'

# alias gcp='git cherry-pick'
# alias gcpa='git cherry-pick --abort'
# alias gcpc='git cherry-pick --continue'

# alias gd='git diff'
# alias gdca='git diff --cached'
# alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
# alias gdt='git diff-tree --no-commit-id --name-only -r'
# alias gdw='git diff --word-diff'
#
# alias gf='git fetch'
# alias gfa='git fetch --all --prune'
# alias gfo='git fetch origin'
#
# alias ggpull='git pull origin $(git_current_branch)'
# alias ggpush='git push origin $(git_current_branch)'
# alias ghf='git hf'
# alias ghff='git hf feature'
# alias ghfh='git hf hotfix'
# alias ghfr='git hf release'
# alias ghfs='git hf support'
# alias ghfu='git hf update'
# alias ghh='git help'
# alias gignore='git update-index --assume-unchanged'
# alias gignored='git ls-files -v | grep "^[[:lower:]]"'
# alias github='web_search github'
# alias gl='git pull'
# alias glg='git log --stat'
# alias glgg='git log --graph'
# alias glgga='git log --graph --decorate --all'
# alias glgm='git log --graph --max-count=10'
# alias glgp='git log --stat -p'
# alias glo='git log --oneline --decorate'
# alias glog='git log --oneline --decorate --graph'
# alias gloga='git log --oneline --decorate --graph --all'
# alias glol='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
# alias glola='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit --all'
# alias glp=_git_log_prettily
# alias glum='git pull upstream master'
# alias gm='git merge'
# alias gmnf='git merge --no-ff'
# alias gmom='git merge origin/master'
# alias gms='git merge --squash'
# alias gmt='git mergetool --no-prompt'
# alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
# alias gmum='git merge upstream/master'
# alias gp='git push'
# alias gpd='git push --dry-run'
# alias gpoat='git push origin --all && git push origin --tags'
# alias gpristine='git reset --hard && git clean -dfx'
# alias gpsup='git push --set-upstream origin $(git_current_branch)'
# alias gpu='git push upstream'
# alias gpv='git push -v'
# alias gr='[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'
# alias gra='git remote add'
# alias grb='git rebase'
# alias grba='git rebase --abort'
# alias grbc='git rebase --continue'
# alias grbi='git rebase -i'
# alias grbm='git rebase master'
# alias grbs='git rebase --skip'
# alias grh='git reset HEAD'
# alias grhh='git reset HEAD --hard'
# alias grmv='git remote rename'
# alias grrm='git remote remove'
# alias grset='git remote set-url'
# alias grt='cd $(git rev-parse --show-toplevel || echo ".")'
# alias gru='git reset --'
# alias grup='git remote update'
# alias grv='git remote -v'
# alias gsb='git status -sb'
# alias gsps='git show --pretty=short --show-signature'
# alias gcount='git shortlog -sn'
# alias gss='git status -s'
# alias gst='git status'
# alias gsta='git stash save'
# alias gstaa='git stash apply'
# alias gstc='git stash clear'
# alias gstd='git stash drop'
# alias gstl='git stash list'
# alias gstp='git stash pop'
# alias gsts='git stash show --text'
# alias gts='git tag -s'
# alias gtv='git tag | sort -V'
# alias gundo='git reset && git checkout . && git clean -fd'
# alias undopush='git push -f origin HEAD^:master'
# alias gunignore='git update-index --no-assume-unchanged'
# alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
# alias gup='git pull --rebase'
# alias gupv='git pull --rebase -v'
# alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'

#steps:
#$ git checkout -b myfeature develop # creates and switches to new branch
#makes changes and commit often. Then, merge back into develop
#$ git checkout develop # switch to develop branch
#$ git merge --no-ff myfeature # the --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoid losing information about the historical existence of a feature branch and group together all commits.
#$ git branch -d myfeature # delete myfeature branch
#$ git push origin develop # updates origin
#
[alias]
  # feature branches
  cobd = checkout -b $1 develop
  st = status
  # checkout a branch by using git co some-branch
  co = checkout
  # create and checkout a new branch
  cob = checkout -b
  # opens the gitconfig file with my default editor
  ec = config --global -e
  #
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  cm = !git add -A && git commit -m
  save = !git add -A && git commit -m 'SAVEPOINT'
  wip = !git add -u && git commit -m "WIP"
  amend = commit -a --amend
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

  prune = fetch --prune
  # Because I constantly forget how to do this
  # https://git-scm.com/docs/git-fetch#git-fetch--p

  undo = reset --soft HEAD^
  # Not quite as common as an amend, but still common
  # https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

  stash-all = stash save --include-untracked
  # We wanna grab those pesky un-added files!
  # https://git-scm.com/docs/git-stash

  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  # No need for a GUI - a nice, colorful, graphical representation
  # https://git-scm.com/docs/git-log
  # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[push]
  default = simple
  # "push the current branch back to the branch whose changes are usually integrated into the current branch"
  # "refuse to push if the upstream branchâ€™s name is different from the local one"
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
  fsckobjects = true
  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0

[diff]
	tool = vimdiff
[difftool]
	prompt = false
[gpg]
	program = gpg2
